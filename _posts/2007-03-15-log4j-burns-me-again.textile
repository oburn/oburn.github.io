---
layout: post
permalink: blog/log4j_burns_me_again
title: Log4J burns me again
category: Java
---
<p>
  We have been doing performance soak testing on a large web application. It showed that we have a memory leak and eventually the application would run out of memory. After configuring WebSphere to automatically <a href="http://www.performancewiki.com/memory-leak-analysis.html">generate a memory dump</a>, diagnosis of the memory dump with <a href="http://www.alphaworks.ibm.com/tech/heapanalyzer">HeapAnalyzer</a> revealed that the culprit is the Log4J <a href="http://logging.apache.org/log4j/docs/api/org/apache/log4j/NDC.html">NDC</a> class which was holding onto 400 megabytes of data. We are using the NDC class to associate a user name and an <a href="http://en.wikipedia.org/wiki/UUID">UUID</a> with all logged messages. This information is setup and removed in a Servlet filter.
</p>


<p>
  The JavaDoc for the <a href="http://logging.apache.org/log4j/docs/api/org/apache/log4j/NDC.html#remove()">remove()</a> method has the following comment:
</p>

<blockquote>
  <p>
    <i>
    Each thread that created a diagnostic context by calling push(java.lang.String) should call this method before exiting. Otherwise, the memory used by the thread cannot be reclaimed by the VM.
    </i>
  </p>
</blockquote>

<p>
  It then goes on to say:
</p>

<blockquote>
  <p>
    <i>
      As this is such an important problem in heavy duty systems and because it is difficult to always guarantee that the remove method is called before exiting a thread, this method has been augmented to lazily remove references to dead threads. In practise, this means that you can be a little sloppy and occasionally forget to call remove() before exiting a thread. However, you must call remove sometime. If you never call it, then your application is sure to run out of memory.
    </i>
  </p>
</blockquote>

<p>
  As I have <a href="http://www.jroller.com/page/oburn?entry=log4j_hangs_my_application">blogged in the past</a>, Log4J has caused my application to hang. Now in this case, you can argue that I should have <a href="http://www.readthefuckingmanual.com/">RTFM</a> more carefully. But, how can I call the <tt>remove()</tt> method before exiting a thread? Since I am running in a WebSphere Servlet container, I have no control over the thread life cycle. Also, the documentation for <tt>remove()</tt> does not state what happens when calling the method multiple times when a thread is not exiting.
</p>

<p>
  So, in the end we:
</p>
<ul>
  <li>Removed all use of NDC.</li>
  <li>Re-read the documentation for <a href="http://logging.apache.org/log4j/docs/api/org/apache/log4j/MDC.html">MDC</a> to verify there are no gotcha's. Being paranoid I also looked at the code.</li>
</ul>

<p>
  This is the second time I have been burned by Log4J. Am I alone in thinking that I should just use the <tt>java.util.logging</tt> package directly. Sure, I would miss tools like <a href="http://logging.apache.org/log4j/docs/chainsaw.html">Chainsaw</a>, but I would rather something reliable and simple. Maybe I should use <a href="http://www.slf4j.org/">SLF4J</a> and use Log4J and Chainsaw in development, and <tt>java.util.logging</tt> in production.
</p>
